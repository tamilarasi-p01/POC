{
	"name": "2_3_4_AcquisitionSHIR_AzureSQLAuth",
	"properties": {
		"activities": [
			{
				"name": "UpdateQueryCurrentExecution",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[Config].[usp_UpdateExecutionStatus]",
					"storedProcedureParameters": {
						"JobId": {
							"value": {
								"value": "@pipeline().parameters.JobID",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"ExecutionTypeId": {
							"value": {
								"value": "@pipeline().parameters.QueryID",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"Status": {
							"value": "InProgress",
							"type": "String"
						},
						"ExecutionType": {
							"value": "Query",
							"type": "String"
						},
						"PipelineRunId": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SRC_Metadata",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "DQcheck",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Get RowsCopied to AzureSQL Auth",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(if(equals(variables('RowsRead'),''),0,int(variables('RowsRead'))),if(equals(variables('RowsCopied'),''),0,int(variables('RowsCopied')))),greater(if(equals(variables('RowsRead'),''),0,int(variables('RowsRead'))),0))",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "updatefailurestatus",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[Config].[usp_UpdateExecutionStatus]",
								"storedProcedureParameters": {
									"JobId": {
										"value": {
											"value": "@pipeline().parameters.JobID",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"ExecutionTypeId": {
										"value": {
											"value": "@pipeline().parameters.QueryID",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"Status": {
										"value": "Failed",
										"type": "String"
									},
									"RowCount": {
										"value": {
											"value": "@if(equals(variables('RowsRead'),''),null,int(variables('RowsRead')))",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"ExecutionType": {
										"value": "Query",
										"type": "String"
									},
									"PipelineRunId": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SRC_Metadata",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Force Failure",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "updatefailurestatus",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "RAISERROR('DQ Check Failed',11,1)\n\nSELECT 1 AS Num",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_LS_SRC_Metadata",
									"type": "DatasetReference"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "UpdateStatus_Success",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[Config].[usp_UpdateExecutionStatus]",
								"storedProcedureParameters": {
									"JobId": {
										"value": {
											"value": "@pipeline().parameters.JobID",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"ExecutionTypeId": {
										"value": {
											"value": "@pipeline().parameters.QueryID",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"Status": {
										"value": "Success",
										"type": "String"
									},
									"RowCount": {
										"value": {
											"value": "@if(equals(variables('RowsRead'),''),null,int(variables('RowsRead')))",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"ExecutionType": {
										"value": "Query",
										"type": "String"
									},
									"PipelineRunId": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SRC_Metadata",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "Get RowsRead from AzureSQL Auth",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Copy data from AzureSQL Auth",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "RowsRead",
					"value": {
						"value": "@string(activity('Copy data from AzureSQL Auth').output.rowsRead)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Get RowsCopied to AzureSQL Auth",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get RowsRead from AzureSQL Auth",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "RowsCopied",
					"value": {
						"value": "@string(activity('Copy data from AzureSQL Auth').output.rowsCopied)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Get Column Mapping for AzureSQL Auth",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Get Column Metadata AzureSQL Auth",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "DECLARE @Mapping AS NVARCHAR(MAX)\n\t,@ColumnStructure NVARCHAR(MAX)\n\t,@ColumnList NVARCHAR(MAX)\n\nSET @ColumnStructure = '@{activity('Get Column Metadata AzureSQL Auth').output.structure}'\n\nSELECT @ColumnList = STRING_AGG(CAST(ColumnName AS NVARCHAR(MAX)),',')\nFROM OPENJSON(@ColumnStructure)\nWITH (\n\tColumnName VARCHAR(255) '$.name'\n\t)\nEXEC [Config].[usp_GetColumnMapping] \n\t@jobId = @{pipeline().parameters.JobID}\n\t,@QueryId = @{pipeline().parameters.QueryID}\n\t,@SourceColumList = @ColumnList\n\t,@ColumnMapping = @Mapping OUTPUT\nSELECT @Mapping AS ColumnMapping",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_LS_SRC_Metadata",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Copy data from AzureSQL Auth",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Get Column Mapping for AzureSQL Auth",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@if(pipeline().parameters.IsDelta\n,replace(pipeline().parameters.SourceQuery,'<DeltaValue>',pipeline().parameters.DeltaValue)\n,pipeline().parameters.SourceQuery)",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false,
					"validateDataConsistency": true,
					"translator": {
						"value": "@json(activity('Get Column Mapping for AzureSQL Auth').output.firstrow.ColumnMapping)",
						"type": "Expression"
					}
				},
				"inputs": [
					{
						"referenceName": "DS_LS_SHIR_AzureSQLAuth",
						"type": "DatasetReference",
						"parameters": {
							"ServerName": {
								"value": "@pipeline().parameters.SourceServerName",
								"type": "Expression"
							},
							"DatabaseName": {
								"value": "@pipeline().parameters.SourceDatabaseName",
								"type": "Expression"
							},
							"UserName": {
								"value": "@pipeline().parameters.UserName",
								"type": "Expression"
							},
							"KeyVaultURL": {
								"value": "@pipeline().parameters.KeyVaultURL",
								"type": "Expression"
							},
							"SecretName": {
								"value": "@pipeline().parameters.SecretName",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DS_LS_SHIR_ADLSGen2",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Get Column Metadata AzureSQL Auth",
				"type": "GetMetadata",
				"dependsOn": [
					{
						"activity": "Copy data from AzureSQL Auth to CSV",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "DS_LS_SHIR_CSV_ADLSGen2",
						"type": "DatasetReference",
						"parameters": {
							"BaseURL": {
								"value": "@pipeline().parameters.TargetAccountURL",
								"type": "Expression"
							},
							"Container": {
								"value": "@pipeline().parameters.TargetContainer",
								"type": "Expression"
							},
							"folderPath": {
								"value": "@pipeline().parameters.TargetFolderPathCSV",
								"type": "Expression"
							},
							"fileName": {
								"value": "@pipeline().parameters.TargetFileNameCSV",
								"type": "Expression"
							},
							"Escape": "\\"
						}
					},
					"fieldList": [
						"structure"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "Copy data from AzureSQL Auth to CSV",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "UpdateQueryCurrentExecution",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@if(pipeline().parameters.IsDelta\n,replace(pipeline().parameters.SourceQueryDM,'<DeltaValue>',pipeline().parameters.DeltaValue)\n,pipeline().parameters.SourceQueryDM)",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"maxRowsPerFile": 0,
							"quoteAllText": true,
							"fileExtension": ".csv"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "DS_LS_SHIR_AzureSQLAuth",
						"type": "DatasetReference",
						"parameters": {
							"ServerName": {
								"value": "@pipeline().parameters.SourceServerName",
								"type": "Expression"
							},
							"DatabaseName": {
								"value": "@pipeline().parameters.SourceDatabaseName",
								"type": "Expression"
							},
							"UserName": {
								"value": "@pipeline().parameters.UserName",
								"type": "Expression"
							},
							"KeyVaultURL": {
								"value": "@pipeline().parameters.KeyVaultURL",
								"type": "Expression"
							},
							"SecretName": {
								"value": "@pipeline().parameters.SecretName",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DS_LS_SHIR_CSV_ADLSGen2",
						"type": "DatasetReference",
						"parameters": {
							"BaseURL": {
								"value": "@pipeline().parameters.TargetAccountURL",
								"type": "Expression"
							},
							"Container": {
								"value": "@pipeline().parameters.TargetContainer",
								"type": "Expression"
							},
							"folderPath": {
								"value": "@pipeline().parameters.TargetFolderPathCSV",
								"type": "Expression"
							},
							"fileName": {
								"value": "@pipeline().parameters.TargetFileNameCSV",
								"type": "Expression"
							},
							"Escape": "\\"
						}
					}
				]
			}
		],
		"parameters": {
			"SourceQuery": {
				"type": "string",
				"defaultValue": "SELECT [Delivery - Finance Geo Key] AS [FinanceGeoKey],[Delivery - Original Finance Geo Key] AS [OriginalFinanceGeoKey],[Delivery - Cost Center Code] AS [CostCenterCode],[Delivery - Cost Center Name] AS [CostCenterName],[Delivery - Profit Center Code] AS [ProfitCenterCode],[Delivery - Profit Center Name] AS [ProfitCenterName],[Delivery - Company Code] AS [CompanyCode],[Delivery - Country Code] AS [CountryCode],[Delivery - Country Name] AS [CountryName],[Delivery - Sales District Code] AS [SalesDistrictCode],[Delivery - Sales District Name] AS [SalesDistrictName],[Delivery - Sales Sublocation Code] AS [SalesSublocationCode],[Delivery - Sales Sublocation Name] AS [SalesSublocationName],[Delivery - Sales Location Code] AS [SalesLocationCode],[Delivery - Sales Location Name] AS [SalesLocationName],[Delivery - WW Subregion Code] AS [WWSubregionCode],[Delivery - WW Subregion Name] AS [WWSubregionName],[Delivery - WW Region Code] AS [WWRegionCode],[Delivery - WW Region Name] AS [WWRegionName],[Delivery - WW Area Code] AS [WWAreaCode],[Delivery - WW Area Name] AS [WWAreaName],[Delivery - Area Summary Code] AS [AreaSummaryCode],[Delivery - Area Summary Name] AS [AreaSummaryName],[Delivery - WW Timezone Area Name] AS [WWTimezoneAreaName],[Delivery - Cost Center Pool Name] AS [CostCenterPoolName],[Delivery - Cost Center Subpool Name] AS [CostCenterSubpoolName],[Delivery - Default Currency Code] AS [DefaultCurrencyCode],[Delivery - Subregion Cluster Name] AS [SubregionClusterName],[Delivery - Sales Location Cluster Name] AS [SalesLocationClusterName],[Delivery - Is Row Current Ind] AS [IsRowCurrentInd],[Delivery - Row Start Date] AS [RowStartDate],[Delivery - Row End Date] AS [RowEndDate],[Delivery - ORG Name] AS [ORGName],[Delivery - Finance WW Area Name] AS [FinanceWWAreaName],[Delivery - Finance WW Region Name] AS [FinanceWWRegionName],[Delivery - Finance WW Subregion Name] AS [FinanceWWSubregionName],[Delivery - Finance Sales Location Name] AS [FinanceSalesLocationName],[Delivery - Function Hierarchy Key] AS [FunctionHierarchyKey],[Delivery - ESACreatedDate] AS [ESWFirstInserted],[Delivery - ESAModifiedDate] AS [Delivery - ESAModifiedDate] FROM [dbo].[vwDeliveryFinanceGeographyDimension]  WHERE [Delivery - Sales Location Name] <> 'UNKNOWN'or ([Delivery - Sales Location Name] = 'UNKNOWN' AND [Delivery - WW Timezone Area Name]='No WW TimeZone Area')"
			},
			"SourceServerName": {
				"type": "string",
				"defaultValue": "ESALISTNR.redmond.corp.microsoft.com"
			},
			"SourceDatabaseName": {
				"type": "string",
				"defaultValue": "dbESAnalyticsMart_SS"
			},
			"TargetContainer": {
				"type": "string",
				"defaultValue": "maidatalake"
			},
			"TargetFolderPath": {
				"type": "string",
				"defaultValue": "data/synapse/Common-ELTL/FinanceGeographyDimension_CO"
			},
			"TargetFileName": {
				"type": "string",
				"defaultValue": "FinanceGeographyDimension_CO20211009.parquet"
			},
			"QueryID": {
				"type": "int",
				"defaultValue": 59
			},
			"JobID": {
				"type": "int",
				"defaultValue": 68
			},
			"MetadataServerName": {
				"type": "string",
				"defaultValue": "maidevasql.database.windows.net"
			},
			"MetadataDatabaseName": {
				"type": "string",
				"defaultValue": "dbMetadata"
			},
			"SourceQueryDM": {
				"type": "string",
				"defaultValue": "SELECT TOP 1 [Delivery - Finance Geo Key] AS [FinanceGeoKey],[Delivery - Original Finance Geo Key] AS [OriginalFinanceGeoKey],[Delivery - Cost Center Code] AS [CostCenterCode],[Delivery - Cost Center Name] AS [CostCenterName],[Delivery - Profit Center Code] AS [ProfitCenterCode],[Delivery - Profit Center Name] AS [ProfitCenterName],[Delivery - Company Code] AS [CompanyCode],[Delivery - Country Code] AS [CountryCode],[Delivery - Country Name] AS [CountryName],[Delivery - Sales District Code] AS [SalesDistrictCode],[Delivery - Sales District Name] AS [SalesDistrictName],[Delivery - Sales Sublocation Code] AS [SalesSublocationCode],[Delivery - Sales Sublocation Name] AS [SalesSublocationName],[Delivery - Sales Location Code] AS [SalesLocationCode],[Delivery - Sales Location Name] AS [SalesLocationName],[Delivery - WW Subregion Code] AS [WWSubregionCode],[Delivery - WW Subregion Name] AS [WWSubregionName],[Delivery - WW Region Code] AS [WWRegionCode],[Delivery - WW Region Name] AS [WWRegionName],[Delivery - WW Area Code] AS [WWAreaCode],[Delivery - WW Area Name] AS [WWAreaName],[Delivery - Area Summary Code] AS [AreaSummaryCode],[Delivery - Area Summary Name] AS [AreaSummaryName],[Delivery - WW Timezone Area Name] AS [WWTimezoneAreaName],[Delivery - Cost Center Pool Name] AS [CostCenterPoolName],[Delivery - Cost Center Subpool Name] AS [CostCenterSubpoolName],[Delivery - Default Currency Code] AS [DefaultCurrencyCode],[Delivery - Subregion Cluster Name] AS [SubregionClusterName],[Delivery - Sales Location Cluster Name] AS [SalesLocationClusterName],[Delivery - Is Row Current Ind] AS [IsRowCurrentInd],[Delivery - Row Start Date] AS [RowStartDate],[Delivery - Row End Date] AS [RowEndDate],[Delivery - ORG Name] AS [ORGName],[Delivery - Finance WW Area Name] AS [FinanceWWAreaName],[Delivery - Finance WW Region Name] AS [FinanceWWRegionName],[Delivery - Finance WW Subregion Name] AS [FinanceWWSubregionName],[Delivery - Finance Sales Location Name] AS [FinanceSalesLocationName],[Delivery - Function Hierarchy Key] AS [FunctionHierarchyKey],[Delivery - ESACreatedDate] AS [ESWFirstInserted],[Delivery - ESAModifiedDate] AS [Delivery - ESAModifiedDate] FROM [dbo].[vwDeliveryFinanceGeographyDimension]  WHERE [Delivery - Sales Location Name] <> 'UNKNOWN'or ([Delivery - Sales Location Name] = 'UNKNOWN' AND [Delivery - WW Timezone Area Name]='No WW TimeZone Area')"
			},
			"TargetAccountURL": {
				"type": "string",
				"defaultValue": "https://etlmigpocadls.dfs.core.windows.net"
			},
			"KeyVaultURL": {
				"type": "string",
				"defaultValue": "https://etlmigkv.vault.azure.net/"
			},
			"UserName": {
				"type": "string",
				"defaultValue": "esrfssys@microsoft.com"
			},
			"SecretName": {
				"type": "string",
				"defaultValue": "maiserviceaccountkey"
			},
			"TargetFolderPathCSV": {
				"type": "string",
				"defaultValue": "data"
			},
			"TargetFileNameCSV": {
				"type": "string",
				"defaultValue": "test.csv"
			},
			"IsDelta": {
				"type": "bool",
				"defaultValue": false
			},
			"DeltaValue": {
				"type": "string",
				"defaultValue": "1900-01-01"
			}
		},
		"variables": {
			"RowsRead": {
				"type": "String"
			},
			"RowsCopied": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Framework/Template/2_AcquisitionOrchestration/2_3_Acquisition"
		},
		"annotations": [],
		"lastPublishTime": "2023-01-19T09:23:34Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}
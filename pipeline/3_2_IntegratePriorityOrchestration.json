{
	"name": "3_2_IntegratePriorityOrchestration",
	"properties": {
		"activities": [
			{
				"name": "Get Priority Integration Metadata",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Log Integrate Priority Orchestration Start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT DISTINCT IntegrationId FROM Config.vwIntegrationMetadata \nWHERE ISExecute = 1 \nAND JobID = @{pipeline().parameters.JobId} \nAND ExecutionTypeNum = @{pipeline().parameters.ExecutionTypeNum} \nAND ISNULL([Priority],0)= @{pipeline().parameters.Priority} \nAND [status] IN ('Ready','Failed','Inprogress')\nORDER BY IntegrationId",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_LS_SRC_Metadata",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "ForEach Integration Orchestration",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get Priority Integration Metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Priority Integration Metadata').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"batchCount": 50,
					"activities": [
						{
							"name": "Execute Create Integrate Views",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "Get Integration Metadata",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "3_3_CreateIntegrateViews",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"Priority": {
										"value": "@pipeline().parameters.Priority",
										"type": "Expression"
									},
									"JobID": {
										"value": "@pipeline().parameters.JobID",
										"type": "Expression"
									},
									"MetadataServerName": {
										"value": "@pipeline().parameters.MetadataServerName",
										"type": "Expression"
									},
									"MetadataDatabaseName": {
										"value": "@pipeline().parameters.MetadataDatabaseName",
										"type": "Expression"
									},
									"ExecutionTypeNum": {
										"value": "@pipeline().parameters.ExecutionTypeNum",
										"type": "Expression"
									},
									"i": {
										"value": "@pipeline().parameters.i",
										"type": "Expression"
									},
									"IntegrationId": {
										"value": "@activity('Get Integration Metadata').output.firstRow.IntegrationId",
										"type": "Expression"
									},
									"ExecutionName": {
										"value": "@activity('Get Integration Metadata').output.firstRow.ExecutionName",
										"type": "Expression"
									},
									"ExecutionParameters": {
										"value": "@activity('Get Integration Metadata').output.firstRow.ExecutionParameters",
										"type": "Expression"
									},
									"DBName": {
										"value": "@activity('Get Integration Metadata').output.firstRow.DBName",
										"type": "Expression"
									},
									"ProcessingId": {
										"value": "@activity('Get Integration Metadata').output.firstRow.ProcessingId",
										"type": "Expression"
									},
									"ProcessingType": {
										"value": "@activity('Get Integration Metadata').output.firstRow.ProcessingType",
										"type": "Expression"
									},
									"ClusterName": {
										"value": "@activity('Get Integration Metadata').output.firstRow.ClusterName",
										"type": "Expression"
									},
									"SQLDWHServerName": {
										"value": "@pipeline().parameters.SQLDWHServerName",
										"type": "Expression"
									},
									"SQLDWHDatabaseName": {
										"value": "@pipeline().parameters.SQLDWHDatabaseName",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "UpdateStatus_Fail",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Execute Create Integrate Views",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[Config].[usp_UpdateExecutionStatus]",
								"storedProcedureParameters": {
									"ExecutionTypeId": {
										"value": {
											"value": "@activity('Get Integration Metadata').output.firstRow.IntegrationId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"JobId": {
										"value": {
											"value": "@pipeline().parameters.JobID",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"Status": {
										"value": "Failed",
										"type": "String"
									},
									"ExecutionType": {
										"value": "Integration",
										"type": "String"
									},
									"ErrorMessage": {
										"value": {
											"value": "@activity('Execute Create Integrate Views').error.message",
											"type": "Expression"
										},
										"type": "String"
									},
									"PipelineRunId": {
										"value": {
											"value": "@activity('Execute Create Integrate Views').output.pipelinerunid",
											"type": "Expression"
										},
										"type": "String"
									},
									"NotebookName": {
										"value": {
											"value": "@activity('Get Integration Metadata').output.firstRow.ExecutionName",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SRC_Metadata",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "UpdateStatus_Success",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Execute Create Integrate Views",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[Config].[usp_UpdateExecutionStatus]",
								"storedProcedureParameters": {
									"ExecutionTypeId": {
										"value": {
											"value": "@activity('Get Integration Metadata').output.firstRow.IntegrationId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"JobId": {
										"value": {
											"value": "@pipeline().parameters.JobID",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"Status": {
										"value": "Success",
										"type": "String"
									},
									"ExecutionType": {
										"value": "Integration",
										"type": "String"
									},
									"PipelineRunId": {
										"value": {
											"value": "@activity('Execute Create Integrate Views').output.pipelinerunid",
											"type": "Expression"
										},
										"type": "String"
									},
									"NotebookName": {
										"value": {
											"value": "@activity('Get Integration Metadata').output.firstRow.ExecutionName",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SRC_Metadata",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Get Integration Metadata",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT * FROM Config.vwIntegrationMetadata \nWHERE JobId = @{pipeline().parameters.JobId}\nAND ExecutionTypeNum = @{pipeline().parameters.ExecutionTypeNum}\nAND Priority = @{pipeline().parameters.Priority}\nAND IntegrationId = @{item().IntegrationId}",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_LS_SRC_Metadata",
									"type": "DatasetReference"
								}
							}
						}
					]
				}
			},
			{
				"name": "Log Integrate Priority Orchestration Start",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[Config].[usp_Loadlog]",
					"storedProcedureParameters": {
						"JobID": {
							"value": {
								"value": "@pipeline().parameters.JobID",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"message": {
							"value": {
								"value": "@concat(pipeline().Pipeline, ' for JobId:',string(pipeline().parameters.JobID),' execution type :',string(pipeline().parameters.ExecutionTypeNum),' and \n Priority:',string(pipeline().parameters.Priority) ,'Started')",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipelinename": {
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SRC_Metadata",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Log Integrate Priority Orchestration End",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "ForEach Integration Orchestration",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[Config].[usp_Loadlog]",
					"storedProcedureParameters": {
						"JobID": {
							"value": {
								"value": "@pipeline().parameters.JobID",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"message": {
							"value": {
								"value": "@concat(pipeline().Pipeline, ' for JobId:',string(pipeline().parameters.JobID),' execution type :',string(pipeline().parameters.ExecutionTypeNum),' and \n Priority:',string(pipeline().parameters.Priority) ,' Completed')",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipelinename": {
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SRC_Metadata",
					"type": "LinkedServiceReference"
				}
			}
		],
		"parameters": {
			"JobId": {
				"type": "Int"
			},
			"Priority": {
				"type": "int"
			},
			"MetadataServerName": {
				"type": "string"
			},
			"MetadataDatabaseName": {
				"type": "string"
			},
			"ExecutionTypeNum": {
				"type": "int"
			},
			"i": {
				"type": "int"
			},
			"SQLDWHServerName": {
				"type": "string"
			},
			"SQLDWHDatabaseName": {
				"type": "string"
			}
		},
		"folder": {
			"name": "3_IntegrationOrchestration"
		},
		"annotations": [],
		"lastPublishTime": "2023-01-30T02:24:52Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}
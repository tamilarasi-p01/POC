{
	"name": "3_1_DQValidation",
	"properties": {
		"activities": [
			{
				"name": "Log DQ Validation Start ",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[Config].[usp_Loadlog]",
					"storedProcedureParameters": {
						"JobID": {
							"value": {
								"value": "@pipeline().parameters.JobID",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"message": {
							"value": {
								"value": "@concat(pipeline().Pipeline, 'for JobId:',string(pipeline().parameters.JobID),' and type:',string(pipeline().parameters.ExecutionTypeNum),' Started')",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipelinename": {
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SRC_Metadata",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Log DQ Validation End",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "If Max Iteration or DQ Failed",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[Config].[usp_Loadlog]",
					"storedProcedureParameters": {
						"JobID": {
							"value": {
								"value": "@pipeline().parameters.JobID",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"message": {
							"value": {
								"value": "@concat(pipeline().Pipeline, 'for JobId:',string(pipeline().parameters.JobID),' and type:',string(pipeline().parameters.ExecutionTypeNum),' Completed')",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipelinename": {
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SRC_Metadata",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Get DQ Metadata",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Log DQ Validation Start ",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT DISTINCT\n\t(CASE WHEN ISJSON(C.ConnectionURL)=1 THEN REPLACE(JSON_VALUE(C.ConnectionURL,'$.\"Account URI\"'),'/'+FD.Container,'') END) AS AccountURL\n\t,FD.Container\n\t,FD.FilePath\nFROM Config.tblDQCheck AS DQ\nINNER JOIN Config.tblfiledataset AS FD ON DQ.FiledatasetID = FD.FiledatasetID\nINNER JOIN Config.tblConnection AS C ON FD.ConnectionID = C.ConnectionID\nINNER JOIN Config.tblfiletypes AS F ON FD.Filetypeid = F.FiletypeID\nWHERE DQ.JobID = @{pipeline().parameters.JobID}\nAND DQ.IsActive = 1\nOR FD.FileName = 'validation_email'\n",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "DS_LS_SRC_Metadata",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Copy DQ Validation",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Get DQ Metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "ParquetSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"wildcardFolderPath": {
								"value": "@activity('Get DQ Metadata').output.firstrow.FilePath",
								"type": "Expression"
							},
							"wildcardFileName": "*.parquet",
							"enablePartitionDiscovery": false
						}
					},
					"sink": {
						"type": "AzureSqlSink",
						"preCopyScript": "DROP TABLE IF EXISTS [Config].[tblDQValidationStg]\nCREATE TABLE [Config].[tblDQValidationStg]\n(\n\t[JobId]          INT NOT NULL,\n\t[DQEntityId]     INT NOT NULL,\n\t[Status]         NVARCHAR(50) NOT NULL,\n\t[emailbody]      NVARCHAR(MAX) NOT NULL,\n\t[IsActive]       INT NOT NULL,\n\t[ValidationTime] DATETIME NOT NULL\n)",
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "DS_LS_SHIR_ADLSGen2",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "DS_LS_TGT_Metadata",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Until DQValidation Proceed",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "Insert DQValidation SP",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@or(or(equals(int(variables('DQValidation')),1),equals(int(variables('DQValidation')),-1)),greaterOrEquals(int(variables('i')),12))",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Get DQValidation",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Set i",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "DECLARE @JobId INT \n\t,@ExecutionTypeNum INT\n        ,@JobStartTime DATETIME\n\nSET @JobId = @{pipeline().parameters.JobID}\nSET @ExecutionTypeNum = @{pipeline().parameters.ExecutionTypeNum}\n\nSELECT @JobStartTime = Starttime\nFROM Config.tblCurrentExecution\nWHERE JobId = @JobId\nAND ExecutionType = 'Job'\n\nIF EXISTS (SELECT\n\t\t*\n\tFROM Config.tblDQValidation DV\n\tINNER JOIN Config.tblDQCheck DC\n\t\tON DV.JobId = DC.JobID\n\t\tAND DV.DQEntityId = DC.DQEntityId\n\tWHERE DV.JobId = @JobId\n\tAND DV.ValidationTime >= @JobStartTime\n\tAND (CASE WHEN DC.DQType = 'DQPreDelta' THEN 3 WHEN DC.DQType = 'DQPrePublish' THEN 5 END) = @ExecutionTypeNum\n\tAND DC.Typeofvalidation = 'Threshold'\n\tAND DV.DQValidation = 0)\nBEGIN\n\tSELECT 0 AS DQValidation\nEND\nELSE IF EXISTS (SELECT\n\t\t*\n\tFROM Config.tblDQValidation DV\n\tINNER JOIN Config.tblDQCheck DC\n\t\tON DV.JobId = DC.JobID\n\t\tAND DV.DQEntityId = DC.DQEntityId\n\tWHERE DV.JobId = @JobId\n\tAND DV.ValidationTime >= @JobStartTime\n\tAND (CASE WHEN DC.DQType = 'DQPreDelta' THEN 3 WHEN DC.DQType = 'DQPrePublish' THEN 5 END) = @ExecutionTypeNum\n\tAND DC.Typeofvalidation = 'Threshold'\n\tAND DV.DQValidation = -1)\nBEGIN\n\tSELECT -1 AS DQValidation\nEND\nELSE\nBEGIN\n\tSELECT 1 AS DQValidation\nEND",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_LS_SRC_Metadata",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "If DQValiation Failed",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Set DQValidation",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@equals(int(variables('DQValidation')),0)",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Wait",
										"type": "Wait",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"waitTimeInSeconds": 600
										}
									}
								]
							}
						},
						{
							"name": "Set DQValidation",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Get DQValidation",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "DQValidation",
								"value": {
									"value": "@string(activity('Get DQValidation').output.firstrow.DQValidation)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set i",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "i",
								"value": {
									"value": "@string(add(int(variables('j')),1))",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set j",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "If DQValiation Failed",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "j",
								"value": {
									"value": "@variables('i')",
									"type": "Expression"
								}
							}
						}
					],
					"timeout": "7.00:00:00"
				}
			},
			{
				"name": "If Max Iteration or DQ Failed",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Until DQValidation Proceed",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@or(equals(int(variables('DQValidation')),-1),greaterOrEquals(int(variables('i')),12))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Force Failure",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "DECLARE @JobId INT\n\t,@ExecutionTypeNum INT\n\t,@ErrorMessage NVARCHAR(MAX)\n\nSET @JobId = @{pipeline().parameters.JobID}\nSET @ExecutionTypeNum = @{pipeline().parameters.ExecutionTypeNum}\n\nSET @ErrorMessage = 'DQCheck is failed for JobId:'+CAST(@JobId AS NVARCHAR(10))+',ExecutionTypeNum:'+CAST(@ExecutionTypeNum AS NVARCHAR(10))\n\nRAISERROR(@ErrorMessage,11,1)\n\nSELECT 1 AS Num",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_LS_SRC_Metadata",
									"type": "DatasetReference"
								}
							}
						}
					]
				}
			},
			{
				"name": "Insert DQValidation SP",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Copy DQ Validation",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[Config].[usp_Insert_DQValidation]",
					"storedProcedureParameters": {
						"JobID": {
							"value": {
								"value": "@pipeline().parameters.JobID",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SRC_Metadata",
					"type": "LinkedServiceReference"
				}
			}
		],
		"parameters": {
			"JobID": {
				"type": "Int"
			},
			"MetadataServerName": {
				"type": "string"
			},
			"MetadataDatabaseName": {
				"type": "string"
			},
			"ExecutionTypeNum": {
				"type": "int"
			}
		},
		"variables": {
			"DQValidation": {
				"type": "String"
			},
			"i": {
				"type": "String",
				"defaultValue": "0"
			},
			"j": {
				"type": "String",
				"defaultValue": "0"
			}
		},
		"folder": {
			"name": "3_IntegrationOrchestration"
		},
		"annotations": [],
		"lastPublishTime": "2023-01-17T13:41:23Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}
{
	"name": "4_2_PublishDelta",
	"properties": {
		"activities": [
			{
				"name": "Switch-QueryType",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "UpdatePublsihCurrentExecution",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@pipeline().parameters.SourceQueryType",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "Query",
							"activities": [
								{
									"name": "PublishDelta",
									"type": "SynapseNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebook": {
											"referenceName": {
												"value": "@pipeline().parameters.NotebookName",
												"type": "Expression"
											},
											"type": "NotebookReference"
										},
										"parameters": {
											"SourceDBName": {
												"value": {
													"value": "@pipeline().parameters.SourceDBName",
													"type": "Expression"
												},
												"type": "string"
											},
											"SourceTableName": {
												"value": {
													"value": "@pipeline().parameters.SourceTableName",
													"type": "Expression"
												},
												"type": "string"
											},
											"SourceQuery": {
												"value": {
													"value": "@pipeline().parameters.SourceQuery",
													"type": "Expression"
												},
												"type": "string"
											},
											"TargetDBName": {
												"value": {
													"value": "@pipeline().parameters.SynapseDBName",
													"type": "Expression"
												},
												"type": "string"
											},
											"TargetSchemaName": {
												"value": {
													"value": "@pipeline().parameters.TargetDBName",
													"type": "Expression"
												},
												"type": "string"
											},
											"TargetTableName": {
												"value": {
													"value": "@pipeline().parameters.TargetTableName",
													"type": "Expression"
												},
												"type": "string"
											},
											"TargetAccountURL": {
												"value": {
													"value": "@pipeline().parameters.TargetAccountURL",
													"type": "Expression"
												},
												"type": "string"
											},
											"TargetContainer": {
												"value": {
													"value": "@pipeline().parameters.TargetContainer",
													"type": "Expression"
												},
												"type": "string"
											},
											"TargetFolderPath": {
												"value": {
													"value": "@pipeline().parameters.TargetFolderPath",
													"type": "Expression"
												},
												"type": "string"
											},
											"TargetCSVFolderPath": {
												"value": {
													"value": "@pipeline().parameters.TargetCSVFolderPath",
													"type": "Expression"
												},
												"type": "string"
											},
											"IsTruncate": {
												"value": {
													"value": "@pipeline().parameters.IsTruncate",
													"type": "Expression"
												},
												"type": "bool"
											},
											"LatestPublishPath": {
												"value": {
													"value": "@pipeline().parameters.LatestPublishPath",
													"type": "Expression"
												},
												"type": "string"
											},
											"SkipDWH": {
												"value": {
													"value": "@pipeline().parameters.SkipDWH",
													"type": "Expression"
												},
												"type": "bool"
											}
										},
										"sparkPool": {
											"referenceName": {
												"value": "@pipeline().parameters.ClusterName",
												"type": "Expression"
											},
											"type": "BigDataPoolReference"
										},
										"executorSize": {
											"value": "@pipeline().parameters.ClusterSize",
											"type": "Expression"
										},
										"conf": {
											"spark.dynamicAllocation.enabled": true,
											"spark.dynamicAllocation.minExecutors": 1,
											"spark.dynamicAllocation.maxExecutors": 25
										},
										"driverSize": {
											"value": "@pipeline().parameters.ClusterSize",
											"type": "Expression"
										},
										"numExecutors": 1
									}
								},
								{
									"name": "Set RowCount",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PublishDelta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "RowsCount",
										"value": {
											"value": "@string(json(activity('PublishDelta').output.status.output.result.exitvalue).RowCount)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set TableScript",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "PublishDelta",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "TableScript",
										"value": {
											"value": "@json(activity('PublishDelta').output.status.output.result.exitvalue).TableScript",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "UpdatePublsihCurrentExecution",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Log Publish Delta Start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[Config].[usp_UpdateExecutionStatus]",
					"storedProcedureParameters": {
						"JobId": {
							"value": {
								"value": "@pipeline().parameters.JobID",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"ExecutionTypeId": {
							"value": {
								"value": "@pipeline().parameters.PublishId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"Status": {
							"value": "InProgress",
							"type": "String"
						},
						"ExecutionType": {
							"value": "Publish",
							"type": "String"
						},
						"PipelineRunId": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SRC_Metadata",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Log Publish Delta Start",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[Config].[usp_Loadlog]",
					"storedProcedureParameters": {
						"JobID": {
							"value": {
								"value": "@pipeline().parameters.JobID",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"message": {
							"value": {
								"value": "@concat(pipeline().Pipeline, 'for JobId:',string(pipeline().parameters.JobID),'for PublishId:',string(pipeline().parameters.PublishId),' Started')",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipelinename": {
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SRC_Metadata",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Log Publish Delta End",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Skip DWH",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[Config].[usp_Loadlog]",
					"storedProcedureParameters": {
						"JobID": {
							"value": {
								"value": "@pipeline().parameters.JobID",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"message": {
							"value": {
								"value": "@concat(pipeline().Pipeline, 'for JobId:',string(pipeline().parameters.JobID),'for PublishId:',string(pipeline().parameters.PublishId),' Completed')",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipelinename": {
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							},
							"type": "String"
						},
						"rowcount": {
							"value": {
								"value": "@if(equals(variables('RowsCount'),''),0,int(variables('RowsCount')))",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SRC_Metadata",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Log Publish Failed",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Skip DWH",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[Config].[usp_Loadlog]",
					"storedProcedureParameters": {
						"JobID": {
							"value": {
								"value": "@pipeline().parameters.JobID",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"message": {
							"value": {
								"value": "@concat(pipeline().Pipeline, 'for JobId:',string(pipeline().parameters.JobID), 'and PublishId',string(pipeline().parameters.PublishId), ' Failed')",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipelinename": {
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							},
							"type": "String"
						},
						"rowcount": {
							"value": {
								"value": "@if(equals(variables('RowsCount'),''),0,int(variables('RowsCount')))",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_SRC_Metadata",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "DQ Check",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Switch-QueryType",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greater(int(variables('RowsCount')),0)",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "UpdateStatus_Failure",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[Config].[usp_UpdateExecutionStatus]",
								"storedProcedureParameters": {
									"JobId": {
										"value": {
											"value": "@pipeline().parameters.JobID",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"ExecutionTypeId": {
										"value": {
											"value": "@pipeline().parameters.PublishId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"Status": {
										"value": "Failed",
										"type": "String"
									},
									"RowCount": {
										"value": {
											"value": "@if(equals(variables('RowsCount'),''),null,int(variables('RowsCount')))",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"ExecutionType": {
										"value": "Publish",
										"type": "String"
									},
									"ErrorMessage": {
										"value": "DQ Check failed",
										"type": "String"
									},
									"PipelineRunId": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SRC_Metadata",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Force Failure",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "UpdateStatus_Failure",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "RAISERROR('DQ Check Failed',11,1)\n\nSELECT 1 AS Num",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_LS_SRC_Metadata",
									"type": "DatasetReference"
								}
							}
						}
					]
				}
			},
			{
				"name": "Skip DWH",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "DQ Check",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@pipeline().parameters.SkipDWH",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Create Exernal Table",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 2,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "SqlDWSource",
									"sqlReaderQuery": {
										"value": "@concat(variables('TableScript'),' SELECT 1 AS Success')",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_LS_SRC_AzureSQLDWH",
									"type": "DatasetReference",
									"parameters": {
										"SchemaName": {
											"value": "@pipeline().parameters.TargetDBName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.TargetTableName",
											"type": "Expression"
										},
										"DBName": {
											"value": "@pipeline().parameters.SQLDWHDatabaseName",
											"type": "Expression"
										},
										"ServerName": {
											"value": "@pipeline().parameters.SQLDWHServerName",
											"type": "Expression"
										}
									}
								}
							}
						},
						{
							"name": "Load Synapse SQL",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Create Exernal Table",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 2,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[Framework].[usp_LoadPublishSql]",
								"storedProcedureParameters": {
									"TargetSchemaName": {
										"value": {
											"value": "@pipeline().parameters.TargetDBName",
											"type": "Expression"
										},
										"type": "String"
									},
									"TargetTableName": {
										"value": {
											"value": "@pipeline().parameters.TargetTableName",
											"type": "Expression"
										},
										"type": "String"
									},
									"PartitionColumn": {
										"value": {
											"value": "@pipeline().parameters.PartitionColumn",
											"type": "Expression"
										},
										"type": "String"
									},
									"DistributionColumn": {
										"value": {
											"value": "@pipeline().parameters.DistributionColumn",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "LS_SRC_AzureSQLDWH",
								"type": "LinkedServiceReference",
								"parameters": {
									"ServerName": {
										"value": "@pipeline().parameters.SQLDWHServerName",
										"type": "Expression"
									},
									"DBName": {
										"value": "@pipeline().parameters.SQLDWHDatabaseName",
										"type": "Expression"
									}
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Create Stage Table",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 2,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "@concat(variables('TableScript'),' SELECT 1 AS Success')",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "DS_LS_SHIR_AzureSQL",
									"type": "DatasetReference"
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"JobId": {
				"type": "int",
				"defaultValue": 105
			},
			"MetaDataServerName": {
				"type": "string",
				"defaultValue": "maidevasql.database.windows.net"
			},
			"MetaDataDatabaseName": {
				"type": "string",
				"defaultValue": "dbMetadata"
			},
			"PublishId": {
				"type": "int",
				"defaultValue": 2319
			},
			"SourceQueryType": {
				"type": "string",
				"defaultValue": "Query"
			},
			"SourceDBName": {
				"type": "string",
				"defaultValue": "dbCommon"
			},
			"SourceTableName": {
				"type": "string",
				"defaultValue": "Reporting_Opportunity"
			},
			"SourceQuery": {
				"type": "string",
				"defaultValue": "SELECT * FROM   dbcommon.Opportunity_Delta"
			},
			"SynapseDBName": {
				"type": "string",
				"defaultValue": "dbmaiinsights"
			},
			"TargetServerName": {
				"type": "string",
				"defaultValue": "maidevasql.database.windows.net"
			},
			"TargetDBName": {
				"type": "string",
				"defaultValue": "dbCommon"
			},
			"TargetTableName": {
				"type": "string",
				"defaultValue": "Reporting_Opportunity"
			},
			"TargetAccountURL": {
				"type": "string",
				"defaultValue": "https://maidevadls.dfs.core.windows.net"
			},
			"TargetContainer": {
				"type": "string",
				"defaultValue": "maidatalake"
			},
			"TargetFolderPath": {
				"type": "string",
				"defaultValue": "data/publish/202201250000/dbCommon/Reporting_Opportunity"
			},
			"TargetCSVFolderPath": {
				"type": "string",
				"defaultValue": "data/publish/metadata/dbCommon/Reporting_Opportunity"
			},
			"ClusterName": {
				"type": "string",
				"defaultValue": "maicommonc1"
			},
			"NotebookName": {
				"type": "string",
				"defaultValue": "PublishDelta_Small"
			},
			"SQLDWHServerName": {
				"type": "string",
				"defaultValue": "tcp:maidevsynapsews.sql.azuresynapse.net,1433"
			},
			"SQLDWHDatabaseName": {
				"type": "string",
				"defaultValue": "dbmaiinsights"
			},
			"IsTruncate": {
				"type": "bool",
				"defaultValue": true
			},
			"LatestPublishPath": {
				"type": "string",
				"defaultValue": "data/publish/202201250000/dbCommon/Reporting_Opportunity"
			},
			"PartitionColumn": {
				"type": "string"
			},
			"DistributionColumn": {
				"type": "string",
				"defaultValue": "OpportunityId"
			},
			"SkipDWH": {
				"type": "bool",
				"defaultValue": false
			},
			"ClusterSize": {
				"type": "string",
				"defaultValue": "Small"
			}
		},
		"variables": {
			"RowsCount": {
				"type": "String"
			},
			"TableScript": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Framework/Template/4_PublishOrchestration"
		},
		"annotations": [],
		"lastPublishTime": "2023-01-17T15:59:28Z"
	},
	"type": "Microsoft.Synapse/workspaces/pipelines"
}
{
	"name": "CreateUnmanagedTable",
	"properties": {
		"folder": {
			"name": "Framework"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ETLMigPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "54a30833-0f82-4a60-aa34-9d7e6bfa2fe0"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5e1710be-d771-4d37-99ce-6a947eb5b32f/resourceGroups/rgETLMigration/providers/Microsoft.Synapse/workspaces/etlmigpocws/bigDataPools/ETLMigPool",
				"name": "ETLMigPool",
				"type": "Spark",
				"endpoint": "https://etlmigpocws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ETLMigPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"Script = '[{\"Script\":\"DROP TABLE IF EXISTS dbCommon.SpecialProductsGroupDimension_CO\"},{\"Script\":\"DROP TABLE IF EXISTS dbCommon.BillingRoleLookUpFlatFile_co\"}]'"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import json\r\n",
					"\r\n",
					"# Parse json to a variable\r\n",
					"jsonscript = json.loads(Script)\r\n",
					"\r\n",
					"for queryobj in jsonscript:\r\n",
					"    for key in queryobj.keys():        \r\n",
					"        try:        \r\n",
					"            spark.sql(queryobj[key])\r\n",
					"        except Exception as e:            \r\n",
					"            raise"
				]
			}
		]
	}
}
{
	"name": "TestPythonVD",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ETLMigPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "5",
				"spark.autotune.trackingId": "14127bff-8baf-4fbe-bfa0-676cc3fa13bd"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/5e1710be-d771-4d37-99ce-6a947eb5b32f/resourceGroups/rgETLMigration/providers/Microsoft.Synapse/workspaces/etlmigpocws/bigDataPools/ETLMigPool",
				"name": "ETLMigPool",
				"type": "Spark",
				"endpoint": "https://etlmigpocws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ETLMigPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 16,
				"memory": 112,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"## m_Generic_ABC_Fail_Email\n",
					"\n",
					"\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"import os;\n",
					"from pyspark.sql import *\n",
					"from pyspark.sql.functions import *\n",
					"# from Mapplets import Mapplets\n",
					"from pyspark import SparkContext;\n",
					"from pyspark.sql.session import SparkSession\n",
					"\n",
					"\n",
					"## Could not run below - as we cannot assign multple context.\n",
					"# sc = SparkContext('local')\n",
					"# spark = SparkSession(sc)\n",
					"\n",
					"Src_AccountURL = 'etlmigpocadls'\n",
					"Src_Container = 'etlmigpocdatalake'\n",
					"Src_Path = '_StaleFiles'\n",
					"\n",
					"Src_URL = 'abfss://{0}@{1}.dfs.core.windows.net/{2}/GLOBAL_CONFIG.parquet'.format(Src_Container, Src_AccountURL, Src_Path)\n",
					"Tgt_URL = 'abfss://{0}@{1}.dfs.core.windows.net/{2}/Output/GLOBAL_CONFIG/'.format(Src_Container, Src_AccountURL, Src_Path)\n",
					"print(\"Source URL : \" + Src_URL)\n",
					"print(\"Target URL : \" + Tgt_URL)\n",
					"\n",
					"\n",
					"### BB Output\n",
					"\n",
					"# SQ_GLOBAL_CONFIG = spark.read.jdbc(os.environ.get('DBConnection_ABC_CONNECT_STRING'), \"\"\"(SELECT  '1'  from dual\n",
					"# WHERE 1=0) QRY\"\"\", properties={'user': os.environ.get('DBConnection_ABC_LOGIN'), 'password': os.environ.get('DBConnection_ABC_PASSWORD'), 'driver': os.environ.get('ORACLE_DRIVER')}).withColumn(\"sys_row_id\", monotonically_increasing_id())\n",
					"\n",
					"# FLTR_ROW_REJECT = SQ_GLOBAL_CONFIG.select( \\\n",
					"# \t.alias('SUCCESS_EMAILID') \\\n",
					"# ).filter(\"false\").withColumn(\"sys_row_id\", monotonically_increasing_id())\n",
					"\n",
					"\n",
					"SQ_GLOBAL_CONFIG = spark.read.format('parquet').load(Src_URL)\n",
					"SQ_GLOBAL_CONFIG.show()\n",
					"\n",
					"FLTR_ROW_REJECT = SQ_GLOBAL_CONFIG.filter(lower(SQ_GLOBAL_CONFIG[\"SUCCESS_EMAILID\"]) == \"false\")\n",
					"FLTR_ROW_REJECT.show()\n",
					"\n",
					"\n",
					"\n",
					"# sourcedf = spark.read.format(\"delta\").load(sourcelocation)\n",
					"# SQ_GLOBAL_CONFIG_path = spark.read.parquet('abfss://{0}@{1}/HC01/Handshake'.format(SourceContainer,SourceAccountURL)).first()[]"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"### Writing Data to Target File\n",
					"\n",
					"FLTR_ROW_REJECT.write.format(\"delta\").mode(\"overwrite\").save(Tgt_URL)\n",
					"\n",
					"# #  df.write.format('delta').mode('overwrite').save(TargetLocation)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"## Reading data from TargetFile\n",
					"df = spark.read.format(\"delta\").load(Tgt_URL)\n",
					"df.show()"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"source": [
					"# mssparkutils.fs.rm(\"abfss://etlmigpocdatalake@etlmigpocadls.dfs.core.windows.net/_StaleFiles/Output/GLOBAL_CONFIG.parquet/\", True) \n",
					"# mssparkutils.fs.rm(\"abfss://etlmigpocdatalake@etlmigpocadls.dfs.core.windows.net/_StaleFiles/Output/GLOBAL_CONFIG/\", True) "
				],
				"execution_count": 4
			}
		]
	}
}